name: Deploy Node to Amazon ECR
on: 
  workflow_dispatch:
    branches:
    - develop
    inputs:
      logLevel:
        description: 'Log level'     
        required: true
        default: 'info'
      tags:
        description: 'Test scenario tags'  
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: kciter/aws-ecr-action@master
      with:
        access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        account_id: ${{ secrets.AWS_ACCOUNT_ID }}
        path: ./app
        dockerfile: ./app/Dockerfile 
        repo: test_ecr_repo
        region: eu-west-1
        tags: latest,${{ github.sha }}
  run-task:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Run task in ECS
      run: |
        aws ecs run-task --cluster node-backend-01 --task-definition run-node-server-02:2 --count 1 --launch-type FARGATE --network-configuration "awsvpcConfiguration={subnets=[subnet-0e3ffc9169375ca9f, subnet-0eeebbe5e721dc898, subnet-05d127ebcd52a4ee7],securityGroups=[sg-0d286ce865164375e], assignPublicIp=ENABLED}"
    
    - name: Migrate databes
      run: |
        aws ecs run-task --cluster node-backend-01 --task-definition node-migrate-db:1 --platform-version 1.4.0 --count 1 --launch-type FARGATE --network-configuration "awsvpcConfiguration={subnets=[subnet-0e3ffc9169375ca9f, subnet-0eeebbe5e721dc898, subnet-05d127ebcd52a4ee7],securityGroups=[sg-0d286ce865164375e], assignPublicIp=ENABLED}"
    
    - name: Get task ARN
      uses: r26d/jq-action@master
      with:
        cmd: jq -n env
    - name: Get task IP
      run: |
        TASK_ARN=$(aws ecs list-tasks --cluster node-backend-01 --output json | jq .taskArns[0])
        NETWORK_INTERFACE=$(aws ecs describe-tasks --cluster node-backend-01 --task ${TASK_ARN} --output json | jq '.tasks[].attachments[].details[] | select(.name == "networkInterfaceId").value')
        TASK_IP=$(aws ec2 describe-network-interfaces --network-interface-ids ${NETWORK_INTERFACE} --output json | jq .NetworkInterfaces[0].Association.PublicIp)

        curl -X PUT "https://api.cloudflare.com/client/v4/zones/db7efe0245cd53e944abeeecf64c1dae/dns_records/1e0ea4fc4ed148fd6cccbb4faeb9ac3e" \
        -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_TOKEN }}" \
        --data "{\"type\":\"A\",\"name\":\"sorint-library.monitit.pl\",\"content\":\"$TASK_IP\",\"ttl\":120}"
